#####################################################################
#   Macros
#####################################################################

[gcode_macro PRINT_START]
description: Start G-Code
gcode:
    {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(210)|float %}
    G21
    G90
    M82
    M140 S{BED_TEMP}
    M104 S170
    M109 S170
    G28
    M190 S{BED_TEMP}
    Z_TILT_ADJUST
    G28
    BED_MESH_CALIBRATE
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z15 F9000
    M104 S{EXTRUDER_TEMP}
    M109 S{EXTRUDER_TEMP}
    G0 X85 Y0 Z1 F3000
    G1 Z0.3
    G92 E0
    G1 E2 F900
    G1 X35 E9 F900
    G1 X25 F9000
    G92 E0
    M221 S95


[gcode_macro PRINT_START_CHAMBER]
description: Start G-Code for ABS/ASA
gcode:
    {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(210)|float %}
    G21
    G90
    M82
    M140 S{BED_TEMP}
    M104 S170
    G28
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z25 F9000
    M106 S77
    M190 S{BED_TEMP}
    TEMPERATURE_WAIT SENSOR="temperature_sensor Chamber" MINIMUM=40
    M107
    M104 S{EXTRUDER_TEMP}
    M109 S{EXTRUDER_TEMP}
    G0 X85 Y0 Z1 F3000
    G1 Z0.3
    G92 E0
    G1 E2 F900
    G1 X35 E9 F900
    G1 X25 F9000
    G92 E0
    M221 S95
   

[gcode_macro PRINT_END]
description: Print End Macro
gcode:
    M400
    G92 E0
    G1 E-1 F3600
    G91

    {% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
    {% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
    {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}

    {% if printer.toolhead.position.x < (max_x - 20) %}
        {% set x_safe = 20.0 %}
    {% else %}
        {% set x_safe = -20.0 %}
    {% endif %}

    {% if printer.toolhead.position.y < (max_y - 20) %}
        {% set y_safe = 20.0 %}
    {% else %}
        {% set y_safe = -20.0 %}
    {% endif %}

    {% if printer.toolhead.position.z < (max_z - 15) %}
        {% set z_safe = 15.0 %}
    {% else %}
        {% set z_safe = max_z - printer.toolhead.position.z %}
    {% endif %}

    G0 X{x_safe} Y{y_safe} F18000
    G0 Z{z_safe} F900
    TURN_OFF_HEATERS
    M107
    G90
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y} F3600
    M221 S100
    M220 S100


[gcode_macro CANCEL_PRINT]
description: Cancel the current print
rename_existing: BASE_CANCEL_PRINT
gcode:
    RESPOND MSG="Printing canceled!"
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    PRINT_END
    BASE_CANCEL_PRINT


[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    RESPOND MSG="Printing paused!"
    # Parameters
    {% set z = params.Z|default(10)|int %}                                                   ; z hop amount
    
    {% if printer['pause_resume'].is_paused|int == 0 %}     
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro
                                     
        SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume                
        BASE_PAUSE                                                                           ; pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
            G91                                                                              ; relative positioning
            G1 Z{z} F900                                                                     ; raise Z up by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        G90                                                                                  ; absolute positioning
        G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000   ; park toolhead at front center
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error) 
        M104 S0                                                                              ; turn off hotend
        SET_IDLE_TIMEOUT TIMEOUT=43200                                                       ; set timeout to 12 hours
    {% endif %}


[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    RESPOND MSG="Printing resuming!"
    # Parameters
    {% set e = params.E|default(2.5)|int %}                                          ; hotend prime amount (in mm)
    
    {% if printer['pause_resume'].is_paused|int == 1 %}
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                        ; wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                     ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)  
        G91                                                                          ; relative positioning
        M83                                                                          ; relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}                                                
            G1 Z{zhop * -1} E{e} F900                                                ; prime nozzle by E, lower Z back down
        {% else %}                      
            G1 Z{zhop * -1} F900                                                     ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %}                             
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60                          ; restore position
        BASE_RESUME                                                                  ; resume print
    {% endif %}


[gcode_macro M600]
gcode:
    PAUSE               


[gcode_macro PREHEAT]
gcode:
    {% set BED = params.BED|default(110)|int %}
	{% set HOTEND = params.HOTEND|default(170)|int %}

    M104 S{HOTEND}
	M140 S{BED}
    G28
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z25 F9000
    M106 S77
    M190 S{BED}
    TEMPERATURE_WAIT SENSOR="temperature_sensor Chamber" MINIMUM=45
    M107


[gcode_macro LOAD_FILAMENT]
description: Filament loading
gcode:
    {% if printer.idle_timeout.state == "Printing" and not printer.pause_resume.is_paused %}
    RESPOND TYPE=error MSG="This macro cannot be used while printing!"
    {% else %}
    SAVE_GCODE_STATE NAME=load_state
    {% if printer.extruder.temperature < 260 %}
    RESPOND MSG="Heating..."
    M109 S260
    {% endif %}
    RESPOND MSG="Loading filament..."
    M83
    G0 E15 F3600
    G0 E60 F900
    G0 E20 F300
    M82
    M400
    RESPOND MSG="Filament loaded..."
    RESTORE_GCODE_STATE NAME=load_state
    {% endif %}


[gcode_macro UNLOAD_FILAMENT]
description: Filament unloading
gcode:
    {% if printer.idle_timeout.state == "Printing" and not printer.pause_resume.is_paused %}
    RESPOND TYPE=error MSG="This macro cannot be used while printing!"
    {% else %}
    SAVE_GCODE_STATE NAME=unload_state
    {% if printer.extruder.temperature < 260 %}
    RESPOND MSG="Heating..."
    M109 S260
    {% endif %}
    RESPOND MSG="Unloading filament..."
    M83
    G1 E10 F300
    G1 E-70 F1800
    M82
    M400
    RESPOND MSG="Filament unloaded..."
    RESTORE_GCODE_STATE NAME=unload_state
    {% endif %}


[gcode_macro M204]
description: Set default Acceleration
rename_existing: M204.1
gcode:
    {% set f = params.F|default(0.5)|float %}
    {% if 'S' in params %}
    {% set s = params.S|float %}
    SET_VELOCITY_LIMIT ACCEL={s} ACCEL_TO_DECEL={ s * f }
    {% else %}
    {% if 'P' in params %}
    {% set p = params.P|float %}
    {% if 'T' in params %}
    {% set t = params.T|float %}
    {% if p < t %}
    SET_VELOCITY_LIMIT ACCEL={p} ACCEL_TO_DECEL={ p * f }
    {% else %}
    SET_VELOCITY_LIMIT ACCEL={t} ACCEL_TO_DECEL={ t * f }
    {% endif %}
    {% else %}
    SET_VELOCITY_LIMIT ACCEL={p} ACCEL_TO_DECEL={ p * f }
    {% endif %}
    {% elif 'T' in params %}
    {% set t = params.T|float %}
    SET_VELOCITY_LIMIT ACCEL={t} ACCEL_TO_DECEL={ t * f }
    {% endif %}
    {% endif %}


[gcode_macro M205]
description: Alternative to Jerk
gcode:
    {% if 'X' in params %}
    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={params.X|int}
    {% elif 'Y' in params %}
    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={params.Y|int}
    {% endif %}


[gcode_macro PRESSURE_ADVANCE]
description: Pressure Advance
gcode:
    {% if printer.idle_timeout.state == "Printing" %}
    RESPOND TYPE=error MSG="This macro cannot be used while printing!"
    {% else %}
    SET_PRESSURE_ADVANCE ADVANCE=0   
    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500
    TUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005
    {% endif %}


[gcode_macro PID_BED_100]
description: Start Bed PID
gcode:
    {% if printer.idle_timeout.state == "Printing" %}
    RESPOND TYPE=error MSG="This macro cannot be used while printing!"
    {% else %}
    _CG28
    M106
    G1 Z50 F3000
    RESPOND MSG="Bed PID in progress..."
    PID_CALIBRATE HEATER=heater_bed TARGET={params.TEMP|default(100)}
    SAVE_CONFIG
    {% endif %}


[gcode_macro PID_HOTEND_260]
description: Start Hotend PID
gcode:
    {% if printer.idle_timeout.state == "Printing" %}
    RESPOND TYPE=error MSG="This macro cannot be used while printing!"
    {% else %}
    _CG28
    M106
    G1 Z50 F3000
    RESPOND MSG="Hotend PID in progress..."
    PID_CALIBRATE HEATER=extruder TARGET={params.TEMP|default(260)}
    SAVE_CONFIG
    {% endif %}


[gcode_macro MOVE_TO_Z0]
description: Move to Z=0
gcode:
    {% if printer.idle_timeout.state == "Printing" %}
    RESPOND TYPE=error MSG="This macro cannot be used while printing!"
    {% else %}
    _CG28
    G0 X60 Y60 F10000
    G1 Z0 F2500
    {% endif %}


[gcode_macro Z_UP]
description: Raise Nozzle
gcode:
    {% set Z_ADJUST = params.Z_ADJUST|default(0.002)|float %}
    SET_GCODE_OFFSET Z_ADJUST={Z_ADJUST} MOVE=1
  

[gcode_macro Z_DOWN]
description: Lower Nozzle
gcode:
    {% set Z_ADJUST = params.Z_ADJUST|default(-0.002)|float %}
    SET_GCODE_OFFSET Z_ADJUST={Z_ADJUST} MOVE=1


[gcode_macro SET_GCODE_OFFSET]
description: Save Z-Offset value
rename_existing: _SET_GCODE_OFFSET
gcode:
    {% if printer.save_variables.variables.gcode_offsets %}
    {% set offsets = printer.save_variables.variables.gcode_offsets %}
    {% else %}
    {% set offsets = {'x': None,'y': None,'z': None} %}
    {% endif %}
    {% set ns = namespace(offsets={'x': offsets.x,'y': offsets.y,'z': offsets.z}) %}
    _SET_GCODE_OFFSET {% for p in params %}{'%s=%s '% (p, params[p])}{% endfor %}
    {%if 'X' in params %}{% set null = ns.offsets.update({'x': params.X}) %}{% endif %}
    {%if 'Y' in params %}{% set null = ns.offsets.update({'y': params.Y}) %}{% endif %}
    {%if 'Z' in params %}{% set null = ns.offsets.update({'z': params.Z}) %}{% endif %}
    {%if 'Z_ADJUST' in params %}
    {%if ns.offsets.z == None %}{% set null = ns.offsets.update({'z': 0}) %}{% endif %}
    {% set null = ns.offsets.update({'z': (ns.offsets.z | float) + (params.Z_ADJUST | float)}) %}
    {% endif %}
    SAVE_VARIABLE VARIABLE=gcode_offsets VALUE="{ns.offsets}"


[delayed_gcode LOAD_GCODE_OFFSETS]
initial_duration: 2
gcode:
    {% if printer.save_variables.variables.gcode_offsets %}
    {% set offsets = printer.save_variables.variables.gcode_offsets %}
    _SET_GCODE_OFFSET {% for axis, offset in offsets.items() if offsets[axis] %}{ "%s=%s " % (axis, offset) }{% endfor %}
    { action_respond_info("Loaded gcode offsets from saved variables [%s]" % (offsets)) }
    {% endif %}


[gcode_macro SAFE_LIFT_Z]
description: Don't exceed max Z
gcode:
    SAVE_GCODE_STATE NAME=SAFE_LIFT_Z
    # user parameters
    {% set z_height      = params.Z|default(0.0)|float %}
    {% set speed         = params.F|default(printer.gcode_move.speed)|int %}
    {% set axis_maximum  = printer.toolhead.axis_maximum %}
	{% set position      = printer.toolhead.position     %}

    # compute the minimum safe upward move size
    {% set z_height = [z_height, axis_maximum.z - position.z]|min|float%}

    G91
    G1 Z{z_height} F{speed}

    RESTORE_GCODE_STATE NAME=SAFE_LIFT_Z


[gcode_macro Park_Center]
description: Park center of bed
gcode:
    _CG28                            
    SAVE_GCODE_STATE NAME=PARKCENTER
    G90                              
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} Z15 F9000    
    RESTORE_GCODE_STATE NAME=PARKCENTER


[gcode_macro Park_Front_Center]
description: Park front center of bed
gcode:
    _CG28                       
    SAVE_GCODE_STATE NAME=PARKFRONT
    G90                     
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z40 F9000                                     
    RESTORE_GCODE_STATE NAME=PARKFRONT


[gcode_macro _CG28]
description: Smart Home
gcode:
    {% if printer.toolhead.homed_axes != "xyz" %}
    G28
    {% endif %}


# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10

[gcode_macro TEST_SPEED]
gcode:
    # Speed
    {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(5)|int %}
    # Acceleration
    {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    # Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
    {% set bound = params.BOUND|default(20)|int %}
    # Size for small pattern box
    {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
    
    # Large pattern
        # Max positions, inset by BOUND
        {% set x_min = printer.toolhead.axis_minimum.x + bound %}
        {% set x_max = printer.toolhead.axis_maximum.x - bound %}
        {% set y_min = printer.toolhead.axis_minimum.y + bound %}
        {% set y_max = printer.toolhead.axis_maximum.y - bound %}
    
    # Small pattern at center
        # Find X/Y center point
        {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
        {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
        
        # Set small pattern box around center point
        {% set x_center_min = x_center - (smallpatternsize/2) %}
        {% set x_center_max = x_center + (smallpatternsize/2) %}
        {% set y_center_min = y_center - (smallpatternsize/2) %}
        {% set y_center_max = y_center + (smallpatternsize/2) %}

    # Save current gcode state (absolute/relative, etc)
    SAVE_GCODE_STATE NAME=TEST_SPEED
    
    # Output parameters to g-code terminal
    { action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
    
    # Home and get position for comparison later:
        G28
        # QGL if not already QGLd (only if QGL section exists in config)
        {% if printer.configfile.settings.quad_gantry_level %}
            {% if printer.quad_gantry_level.applied == False %}
                QUAD_GANTRY_LEVEL
                G28 Z
            {% endif %}
        {% endif %} 
        # Move 50mm away from max position and home again (to help with hall effect endstop accuracy - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/24)
        G90
        G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
        G28 X Y
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Go to starting position
    G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

    # Set new limits
    SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}

    {% for i in range(iterations) %}
        # Large pattern
            # Diagonals
            G0 X{x_min} Y{y_min} F{speed*60}
            G0 X{x_max} Y{y_max} F{speed*60}
            G0 X{x_min} Y{y_min} F{speed*60}
            G0 X{x_max} Y{y_min} F{speed*60}
            G0 X{x_min} Y{y_max} F{speed*60}
            G0 X{x_max} Y{y_min} F{speed*60}
            
            # Box
            G0 X{x_min} Y{y_min} F{speed*60}
            G0 X{x_min} Y{y_max} F{speed*60}
            G0 X{x_max} Y{y_max} F{speed*60}
            G0 X{x_max} Y{y_min} F{speed*60}
        
        # Small pattern
            # Small diagonals 
            G0 X{x_center_min} Y{y_center_min} F{speed*60}
            G0 X{x_center_max} Y{y_center_max} F{speed*60}
            G0 X{x_center_min} Y{y_center_min} F{speed*60}
            G0 X{x_center_max} Y{y_center_min} F{speed*60}
            G0 X{x_center_min} Y{y_center_max} F{speed*60}
            G0 X{x_center_max} Y{y_center_min} F{speed*60}
            
            # Small box
            G0 X{x_center_min} Y{y_center_min} F{speed*60}
            G0 X{x_center_min} Y{y_center_max} F{speed*60}
            G0 X{x_center_max} Y{y_center_max} F{speed*60}
            G0 X{x_center_max} Y{y_center_min} F{speed*60}
    {% endfor %}

    # Restore max speed/accel/accel_to_decel to their configured values
    SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 

    # Re-home and get position again for comparison:
        G28
        # Go to XY home positions (in case your homing override leaves it elsewhere)
        G90
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Restore previous gcode state (absolute/relative, etc)
    RESTORE_GCODE_STATE NAME=TEST_SPEED